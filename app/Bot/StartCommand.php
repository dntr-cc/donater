<?php

declare(strict_types=1);

namespace App\Bot;

use App\Events\OpenGraphRegenerateEvent;
use App\Http\Controllers\SubscribeController;
use App\Models\DeepLink;
use App\Models\Subscribe;
use App\Models\SubscribesMessage;
use App\Models\User;
use App\Models\UserSetting;
use App\Services\LoginService;
use Carbon\Carbon;
use Illuminate\Support\Facades\Cache;
use Telegram\Bot\Commands\Command;
use Telegram\Bot\Laravel\Facades\Telegram;

class StartCommand extends Command
{
    public const string AUTHORISE_SUCCESS = '–í–∞—Å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ –Ω–∞ —Å–∞–π—Ç—ñ. –û–Ω–æ–≤—ñ—Ç—å —Å—Ç–æ—Ä—ñ–Ω–∫—É, —è–∫—â–æ —Ü–µ –Ω–µ —Å—Ç–∞–ª–æ—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ';
    protected string $name = 'start';

    /**
     * @var string Command Description
     */
    protected string $description = '–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è';

    /**
     * {@inheritdoc}
     */
    public function handle(): void
    {
        // Check if the start command has been issued with a login code
        $message = $this->getUpdate()->getMessage();
        $text = str_replace('/start ', '', $message->getText());
        if (!empty($text)) {
            $isExist = Cache::pull('login:start:' . $text);
            if ($isExist) {
                $from = $message?->getFrom();
                Cache::set('login:end:' . $text, $from->toJson(), 60);
                $this->replyWithMessage(['text' => self::AUTHORISE_SUCCESS]);
            }
            $matches = [];
            preg_match('/deep[0-9a-z\-\_]+/', (string)$text, $matches);
            $code = strtr((string)$matches[0], ['deep' => '']);
            if (!empty($code) && Cache::has(':deep' . $code)) {
                $from = $message?->getFrom();
                $chatId = $message?->getChat()?->getId();
                if (!$chatId || !$from) {
                    return;
                }
                Cache::forget($matches[0]);
                $deepLink = DeepLink::query()->where('hash', '=', $code)->first();
                if (!$deepLink->exists()) {
                    Telegram::sendMessage([
                        'chat_id' => $chatId,
                        'text'    => '–î—ñ–ø-–ª—ñ–Ω–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!',
                    ]);
                    return;
                }
                /** @var User|null $volunteer */
                $volunteer = $deepLink->volunteer()->first();
                if (!$volunteer || !$volunteer->exists()) {
                    Telegram::sendMessage([
                        'chat_id' => $chatId,
                        'text'    => '–í–æ–ª–æ–Ω—Ç–µ—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!',
                    ]);
                    return;
                }
                $user = app(LoginService::class)->getOrCreateUser($from->toArray());
                $date = Carbon::parse(date('Y-m-d') . ' ' . $deepLink->getStartedAt() . ':00')->setTimezone(config('app.timezone'));
                $data = [
                    'user_id'          => $user->getId(),
                    'frequency'        => SubscribesMessage::DAILY_NAME,
                    'volunteer_id'     => $volunteer->getId(),
                    'amount'           => $deepLink->getAmount(),
                    'first_message_at' => $date->isPast() ? $date->addDay() : $date,
                ];
                $subscribe = Subscribe::createOrRestore($data);
                $subscribesMessage = $subscribe->getNextSubscribesMessage();
                $subscribesMessage?->update(['need_send' => false]);
                SubscribesMessage::create([
                    'subscribes_id' => $subscribe->getId(),
                    'frequency'     => $subscribe->getFrequency(),
                    'scheduled_at'  => $subscribe->getFirstMessageAt(),
                    'need_send'     => true,
                    'hash'          => SubscribesMessage::generateHash($subscribe->getId(), $subscribe->getFirstMessageAt()->format('Y-m-d H:i:s')),
                ]);
                OpenGraphRegenerateEvent::dispatch($volunteer->getId(), OpenGraphRegenerateEvent::TYPE_USER);
                OpenGraphRegenerateEvent::dispatch($subscribe->getDonater()->getId(), OpenGraphRegenerateEvent::TYPE_USER);
                if (!$volunteer->settings->hasSetting(UserSetting::DONT_SEND_SUBSCRIBERS_INFORMATION)) {
                    $donater = $subscribe->getDonater();
                    $message = strtr(SubscribeController::SUBSCRIPTION_CREATE_MESSAGE, [
                        ':amount'    => $subscribe->getAmount(),
                        ':donater'   => $donater->getUsername(),
                        ':first'     => $subscribe->getFirstMessageAt(),
                        ':frequency' => mb_strtolower(SubscribesMessage::FREQUENCY_NAME_MAP[$subscribe->getFrequency() ?? ''] ?? ''),
                    ]);

                    $volunteer->sendBotMessage($message);
                }
                $textForUser = <<<'TXT'
                –í—ñ—Ç–∞—î–º–æ! –í–∏ —Å–∫–æ—Ä–∏—Å—Ç–∞–ª–∏—Å—è —à–≤–∏–¥–∫–æ—é –ø—ñ–¥–ø–∏—Å–∫–æ—é –Ω–∞ –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞ :volunteer.

                –í–∞—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ª–æ–≥—ñ–Ω–∏–ª–æ –Ω–∞ —Å–∞–π—Ç—ñ donater.com.ua, —è–∫—â–æ –≤–∏ —Ä–∞–Ω—ñ—à–µ –Ω–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–ª–∏—Å—è —Ü–∏–º —Å–∞–π—Ç–æ–º, –≤–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –ø—Ä–æ—Ñ—ñ–ª—å.

                –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å :userLink

                –¢–∞–∫–æ–∂ –≤–∞—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ–¥–ø–∏—Å–∞–Ω–æ –Ω–∞ –≤–∞—à–æ–≥–æ –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞ –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏–º–∏ —É–º–æ–≤–∞–º–∏:
                - –ø–µ—Ä—à–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ :time
                - —Å—É–º–∞ –¥–æ–Ω–∞—Ç—É :amount –≥—Ä–Ω.

                –í –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π —á–∞—Å –≤–∞–º –±—É–¥—É—Ç—å –ø—Ä–∏—Ö–æ–¥–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∞ –±–∞–Ω–∫—É –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –≤—ñ–¥–∫–∫—Ä–∏—Ç–æ–≥–æ –∑–±–æ—Ä—É –≤–∞—à–æ–≥–æ –≤–æ–ª–æ–Ω—Ç–µ—Ä—É.

                –í –ø–æ—Å–∏–ª–∞–Ω–Ω—ñ –≤–∂–µ –±—É–¥–µ –ø—Ä–æ–ø–∏—Å–∞–Ω–∞ —Å—É–º–∞ –¥–æ–Ω–∞—Ç—É —Ç–∞ –≤–∞—à –∫–æ–¥ –¥–æ–Ω–∞—Ç–µ—Ä–∞, –∞ —Ç–∞–∫–æ–∂ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π –∫–æ–¥, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ —Å–ª—ñ–¥–∫—É–≤–∞—Ç–∏ —á–∏ –¥–æ—Ç—Ä–∏–º—É—î—Ç–µ—Å—è –≤–∏ —É–º–æ–≤ –ø—ñ–¥–ø–∏—Å–∫–∏.

                –Ø–∫—â–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ –≤—ñ–¥–∫—Ä–∏–ª–æ—Å—è –æ–¥—Ä–∞–∑—É –≤ –º–æ–Ω–æ - –∑–≤–µ—Ä—Ö—É –±—É–¥–µ –∫–Ω–æ–ø–∫–∞ "–≤—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏ —Ç–∞–∫—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤ –º–æ–Ω–æ". –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –≤–∏ –∑–º–æ–∂–µ—Ç–µ –≤ –æ–¥–∏–Ω –∫–ª—ñ–∫ –ø–æ–ø–∞–¥–∞—Ç–∏ –≤ –¥–æ–¥–∞—Ç–æ–∫ –º–æ–Ω–æ, –∞ —Å—É–º–∞ —Ç–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä –≤–∂–µ –±—É–¥—É—Ç—å –∑–∞–ø–æ–≤–µ–Ω–µ–Ω—ñ.

                –Ø–∫—â–æ –≤–æ–ª–æ–Ω—Ç–µ—Ä –Ω–µ –º–∞—î –≤—ñ–¥–∫—Ä–∏—Ç–æ–≥–æ –∑–±–æ—Ä—É - –≤–∏ –Ω–µ –æ—Ç—Ä–∏–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –û–¥–Ω–∞–∫ —è–∫—â–æ –≤–æ–ª–æ–Ω—Ç–µ—Ä –≤—ñ–¥–∫—Ä–∏—î –Ω–æ–≤–∏–π –∑–±—ñ—Ä, –≤–∏ –æ–¥—Ä–∞–∑—É –æ—Ç—Ä–∏–º–∞—î—Ç–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–∞–¥–æ–Ω–∞—Ç–∏—Ç–∏. –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω—ñ –≤–∂–µ –±—É–¥—É—Ç—å –∑–∞ —Ä–æ–∑–∫–ª–∞–¥–æ–º.

                –Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —É–º–æ–≤–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ - —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è —Å–∞–π—Ç–æ–º donater.com.ua/login

                –Ø–∫—â–æ –≤–∏ –≤–∏–ø–∞–¥–∫–æ–≤–æ –≤—ñ–¥–∫—Ä–∏–ª–∏ —Ü–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è - –ø—Ä–æ—Å—Ç–æ –∑–∞–±–ª–æ–∫—É–π—Ç–µ –±–æ—Ç–∞.

                –î—è–∫—É—î–º–æ –≤–∞–º –∑–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—å–∫–æ–≥–æ —Ä—É—Ö—É –£–∫—Ä–∞—ó–Ω—ñüá∫üá¶‚ù§Ô∏è!
                TXT;
                $user->sendBotMessage(strtr($textForUser, [
                    ':volunteer' => $volunteer->getUserLink(),
                    ':userLink' => $user->getUserLink(),
                    ':time' => $subscribe->getFirstMessageAt(),
                    ':amount' => $subscribe->getAmount(),
                ]));
            }
        } else {
            $this->replyWithMessage(['text' => '–í—ñ—Ç–∞—é! –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∑ —Å–∞–π—Ç—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó ‚¨áÔ∏è']);
        }
    }
}
